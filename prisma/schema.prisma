// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }

// datasource db {
//   provider  = "postgresql"
//   url       = env("DATABASE_URL")
//   directUrl = env("DIRECT_URL")
// }

datasource db {
  provider  = "postgresql"
  url       = env("DB_PRISMA_URL") // uses connection pooling
  directUrl = env("DB_URL_NON_POOLING") // uses a direct connection
}

enum SharePeople {
  NONE
  ALL
  SUBS
}

model User {
  id             String       @id @default(cuid())
  username       String       @unique
  firstName      String?
  lastName       String?
  active         Boolean      @default(false)
  hashedPassword String
  avatarUrl      String       @default("")
  registeredAt   DateTime     @default(now())
  sessions       Session[]
  books          Book[]
  collections    Collection[]
  lastExport     DateTime?

  shareFollowers     SharePeople @default(NONE)
  shareSubscriptions SharePeople @default(NONE)
  shareStats         SharePeople @default(NONE)
  hideActivity       Boolean     @default(false)

  follower  Follow[]      @relation("FollowerToUser")
  following Follow[]      @relation("FollowingToUser")
  memberOf  GroupMember[]

  verified Boolean @default(false)
  admin    Boolean @default(false)

  Group            Group?            @relation(fields: [groupId], references: [id])
  groupId          String?
  supportQuestions SupportQuestion[]
  supportAnswers   SupportAnswer[]
  AnswerRead       AnswerRead[]
  lists            List[]
}

model SupportQuestion {
  id         String @id @default(cuid())
  fromUser   User   @relation(fields: [fromUserId], references: [id])
  fromUserId String

  title   String
  content String
  date    DateTime @default(now())

  answers SupportAnswer[]
  isDone  Boolean         @default(false)
}

model SupportAnswer {
  id         String @id @default(cuid())
  fromUser   User   @relation(fields: [fromUserId], references: [id])
  fromUserId String

  question   SupportQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String

  content String
  date    DateTime @default(now())

  read AnswerRead[]
}

model AnswerRead {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  answer   SupportAnswer @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId String
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

enum BackgroundColor {
  NONE
  YELLOW
  RED
  BLUE
  GREEN
}

model Book {
  id          String       @id @default(cuid())
  title       String
  author      String
  pages       Int
  createdAt   DateTime     @default(now())
  readEvents  ReadEvent[]
  collections Collection[]
  description String       @default("")
  coverUrl    String?
  links       BookLink[]
  /// [Field]
  fields      Json[]        @default([])

  background BackgroundColor @default(NONE)

  isHidden Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  groupBook   GroupBook? @relation(fields: [groupBookId], references: [id])
  groupBookId String?
}

model BookLink {
  id     String @id @default(cuid())
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId String
}

model ReadEvent {
  id     String   @id @default(cuid())
  readAt DateTime

  pagesRead Int

  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId String
}

model Collection {
  id    String @id @default(cuid())
  name  String
  books Book[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Follow {
  id      String @id @default(cuid())
  first   User   @relation("FollowerToUser", fields: [firstId], references: [id])
  firstId String

  second   User   @relation("FollowingToUser", fields: [secondId], references: [id])
  secondId String
}

model Group {
  id    String @id @default(cuid())
  title String

  members      GroupMember[]
  groupBooks   GroupBook[]
  inviteLinks  GroupInviteLink[]
  blockedUsers User[]
  suggestions  GroupBookSuggestion[]
}

model GroupBookSuggestion {
  id String @id @default(cuid())

  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  title       String
  author      String
  coverUrl    String?
  pages       Int
  description String  @default("")

  member   GroupMember @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String

  createdAt DateTime @default(now())
}

model GroupInviteLink {
  id          String      @id
  group       Group       @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     String
  createdAt   DateTime    @default(now())
  createdBy   GroupMember @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String
}

enum GroupMemberRole {
  CREATOR
  MODERATOR
  MEMBER
}

model GroupMember {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  inviteLinks GroupInviteLink[]

  showInFeed Boolean @default(false)

  role GroupMemberRole

  booksAdded  GroupBook[]
  suggestions GroupBookSuggestion[]
}

model GroupBook {
  id String @id @default(cuid())

  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  addedBy   GroupMember @relation(fields: [addedById], references: [id], onDelete: Cascade)
  addedById String

  title       String
  author      String
  pages       Int
  description String  @default("")
  coverUrl    String?

  book Book[]
}

model List {
  id String @id @default(cuid())

  name  String
  books ListBook[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model ListBook {
  id String @id @default(cuid())

  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId String

  title       String
  author      String
  pages       Int
  coverUrl    String?
  description String  @default("")
}
