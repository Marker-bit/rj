// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }

// datasource db {
//   provider  = "postgresql"
//   url       = env("DATABASE_URL")
//   directUrl = env("DIRECT_URL")
// }

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum SharePeople {
  NONE
  ALL
  SUBS
}

model User {
  id                 String       @id @default(cuid())
  username           String       @unique
  firstName          String?
  lastName           String?
  active             Boolean      @default(false)
  hashedPassword     String
  avatarUrl          String       @default("")
  sessions           Session[]
  books              Book[]
  collections        Collection[]
  shareFollowers     SharePeople  @default(NONE)
  shareSubscriptions SharePeople  @default(NONE)
  shareStats         SharePeople  @default(NONE)

  follower  Follow[]      @relation("FollowerToUser")
  following Follow[]      @relation("FollowingToUser")
  memberOf  GroupMember[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Book {
  id          String       @id @default(cuid())
  title       String
  author      String
  pages       Int
  readEvents  ReadEvent[]
  collections Collection[]
  description String       @default("")
  coverUrl    String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  groupBook   GroupBook? @relation(fields: [groupBookId], references: [id])
  groupBookId String?
}

model ReadEvent {
  id     String   @id @default(cuid())
  readAt DateTime

  pagesRead Int

  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId String
}

model Collection {
  id    String @id @default(cuid())
  name  String
  books Book[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Follow {
  id      String @id @default(cuid())
  first   User   @relation("FollowerToUser", fields: [firstId], references: [id])
  firstId String

  second   User   @relation("FollowingToUser", fields: [secondId], references: [id])
  secondId String
}

model Group {
  id    String @id @default(cuid())
  title String

  members    GroupMember[]
  groupBooks GroupBook[]
}

enum GroupMemberRole {
  CREATOR
  MODERATOR
  MEMBER
}

model GroupMember {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  showInFeed Boolean @default(false)

  role GroupMemberRole

  booksAdded GroupBook[]
}

model GroupBook {
  id String @id @default(cuid())

  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  addedBy   GroupMember @relation(fields: [addedById], references: [id], onDelete: Cascade)
  addedById String

  title       String
  author      String
  pages       Int
  description String  @default("")
  coverUrl    String?

  book Book[]
}
